name: deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository's code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set working directory to react-js (if your package.json is inside this folder)
      - name: Set working directory
        run: cd react-js

      # Set up Node.js environment for React
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Specify Node.js version

      - name: Install dependencies
        run: npm install
        working-directory: react-js  # Make sure npm is run inside the correct folder

      - name: Build the React app
        run: npm run build
        working-directory: react-js  # Build React inside the correct folder

      # Set up AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Specify your region here

      # List all S3 buckets
      - name: List all S3 Buckets
        run: |
          aws s3 ls

      # Check if the S3 bucket exists, create if not
      - name: Ensure S3 Bucket Exists
        run: |
          export BUCKET_NAME="react-s3-bucket"  # Explicitly set bucket name
          if ! aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket exists: $BUCKET_NAME"
          else
            echo "Bucket does not exist, creating: $BUCKET_NAME"
            aws s3 mb s3://$BUCKET_NAME
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV  # Save bucket name as environment variable

      # Upload the React build folder to S3
      - name: Upload React build to S3
        run: |
          aws s3 cp react-js/build/ s3://$BUCKET_NAME/ --recursive  # Upload the build folder

      # Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id your-cloudfront-id --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
